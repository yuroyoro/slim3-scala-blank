<project name="slim3-blank" default="gen-controller" basedir=".">
    <property file="build.properties" />

    <property name="scala-library.jar"
      value="${scala.home}/lib/scala-library.jar" />

    <path id="classpath">
        <pathelement path="war/WEB-INF/classes" />
        <fileset dir="war/WEB-INF/lib">
            <include name="**/*.jar" />
        </fileset>
        <fileset dir="${gae.sdk.home}/lib">
           <include name="shared/**/*.jar" />
           <include name="impl/**/*.jar" />
        </fileset>
        <fileset dir="lib">
            <include name="**/*.jar" />
        </fileset>
    </path>

    <taskdef name="gen-model" classname="org.slim3.gen.task.GenModelTask" classpathref="classpath"/>
    <taskdef name="gen-view" classname="org.slim3.gen.task.GenViewTask" classpathref="classpath"/>
    <taskdef name="gen-service" classname="org.slim3.gen.task.GenServiceTask" classpathref="classpath"/>
    <taskdef name="gen-controller" classname="org.slim3.gen.task.GenControllerTask" classpathref="classpath"/>
    <taskdef name="gen-gwt-service" classname="org.slim3.gen.task.GenGWTServiceTask" classpathref="classpath"/>
    <taskdef name="gen-gwt-service-impl" classname="org.slim3.gen.task.GenGWTServiceImplTask" classpathref="classpath"/>

    <taskdef name="gen-scala-controller" classname="org.slim3.gen.scala.task.GenScalaControllerTask" classpathref="classpath"/>
    <taskdef name="gen-scala-service" classname="org.slim3.gen.scala.task.GenScalaServiceTask" classpathref="classpath"/>

    <target name="gen-controller">
        <input message="Input a controller path." addproperty="controllerPath"/>
        <gen-controller srcdir="${srcDir}" testdir="${testDir}" wardir="${warDir}" controllerpath="${controllerPath}"
             useView="true"/>
        <gen-view wardir="${warDir}" controllerPath="${controllerPath}"/>
    </target>

    <target name="gen-controller-without-view">
        <input message="Input a controller path." addproperty="controllerPath"/>
        <gen-controller srcdir="${srcDir}" testdir="${testDir}" wardir="${warDir}" controllerpath="${controllerPath}"
            useView="false"/>
    </target>

    <target name="gen-model">
        <input message="Input a model name. (ex.  Foo -> root.model.Foo,  bar.Foo -> root.model.bar.Foo). Sub-model extends Super-model." addproperty="modelDefinition"/>
        <gen-model srcdir="${srcDir}" testdir="${testDir}" wardir="${warDir}" modelDefinition="${modelDefinition}" modelClassNameProperty="modelClassName"/>
    </target>

    <target name="gen-service">
        <input message="Input a service name. (ex.  FooService -> root.service.FooService,  bar.FooService -> root.service.bar.FooService)" addproperty="serviceDefinition"/>
        <gen-service srcdir="${srcDir}" testdir="${testDir}" wardir="${warDir}" serviceDefinition="${serviceDefinition}"/>
    </target>

    <target name="gen-gwt-service">
        <input message="Input a GWT service name. (ex.  FooService -> root.client.service.FooService,  bar.FooService -> root.client.service.bar.FooService)" addproperty="serviceDefinition"/>
        <gen-gwt-service srcdir="${srcDir}" testdir="${testDir}" wardir="${warDir}" serviceDefinition="${serviceDefinition}" serviceClassNameProperty="serviceClassName"/>
        <gen-gwt-service-impl srcdir="${srcDir}" testdir="${testDir}" wardir="${warDir}" serviceDefinition="${serviceDefinition}" serviceClassName="${serviceClassName}"/>
    </target>

    <target name="gen-scala-controller">
        <input message="Input a controller path." addproperty="controllerPath"/>
        <gen-scala-controller srcdir="${srcDir}" testdir="${testDir}" wardir="${warDir}" controllerpath="${controllerPath}"
             useView="true"/>
        <gen-view wardir="${warDir}" controllerPath="${controllerPath}"/>
    </target>

    <target name="gen-scala-service">
        <input message="Input a service name. (ex.  FooService -> root.service.FooService,  bar.FooService -> root.service.bar.FooService)" addproperty="serviceDefinition"/>
        <gen-scala-service srcdir="${srcDir}" testdir="${testDir}" wardir="${warDir}" serviceDefinition="${serviceDefinition}"/>
    </target>

    <target name="clean">
        <delete dir="build/test-classes/" failonerror="false"/>
        <mkdir dir="build/test-classes/"/>
        <delete dir="war/WEB-INF/classes/" failonerror="false"/>
        <mkdir dir="war/WEB-INF/classes/"/>
    </target>

    <target name="copy">
        <copy todir="war/WEB-INF/lib" file="../slim3/target/slim3-${ver}.jar"/>
        <copy todir="libsrc" file="../slim3/target/slim3-${ver}-sources.jar"/>
        <copy todir="lib" file="../slim3-gen/target/slim3-gen-${ver}.jar"/>
        <copy todir="libsrc" file="../slim3-gen/target/slim3-gen-${ver}-sources.jar"/>
        <copy todir="src" file="../slim3/src/main/resources/application_en.properties"/>
        <copy todir="src" file="../slim3/src/main/resources/application_ja.properties"/>
    </target>

    <target name="dist" depends="test">
        <delete includeemptydirs="true" failonerror="false">
            <fileset dir="target"/>
        </delete>
        <mkdir dir="target"/>
        <zip zipfile="target/slim3-scala-blank-${ver}.zip">
            <zipfileset prefix="slim3-scala-blank" dir=".">
                <exclude name="target/**"/>
                <exclude name="war/WEB-INF/classes/**"/>
            </zipfileset>
        </zip>
    </target>

    <target name="compile" >
      <apt srcdir="${srcDir}" destdir="war/WEB-INF/classes"
              factory="org.slim3.gen.processor.ModelProcessorFactory"
              classpathref="classpath"
              factorypathref="classpath"
              preprocessdir="war/WEB-INF/classes" />

      <javac srcdir="${srcDir}"
            classpathref="classpath"
            destdir="war/WEB-INF/classes" debug="on" encoding="UTF-8">
        <include name="**/*.java"   />
        <exclude name="**/*.scala"   />
      </javac>

      <scalac srcdir="${srcDir}"
              destdir="war/WEB-INF/classes"
              classpathref="classpath">
        <include name="**/*.scala"   />
        <exclude name="**/*.java"   />
      </scalac>
    </target>

    <target name="test-compile" depends="compile">

      <javac srcdir="${testDir}"
            classpathref="classpath"
            destdir="build/test-classes" debug="on" encoding="UTF-8">
        <include name="**/*.java"   />
        <exclude name="**/*.scala"   />
      </javac>

      <scalac srcdir="${testDir}"
              classpathref="classpath"
              destdir="build/test-classes" >
        <include name="**/*.scala"   />
        <exclude name="**/*.java"   />
      </scalac>
    </target>

    <target name="test" depends="test-compile">
      <junit showoutput="true" printsummary="yes" haltonfailure="yes">
        <batchtest fork="yes">
          <fileset dir="build/test-classes">
              <include name="**/*Test.class"/>
              <exclude name="**/*SpecTest.class"/>
          </fileset>
        </batchtest>
        <formatter type="plain" usefile="false" />
        <classpath refid="classpath" />
        <classpath>
          <pathelement path="build/test-classes" />
        </classpath>
      </junit>
      <run-specs-class classname="${specs.testclass}" />
    </target>

    <macrodef name="run-specs-class">
      <attribute name="classname" />
      <sequential>
        <java classname="scala.tools.nsc.MainGenericRunner" fork="true" failonerror="true">
          <classpath refid="classpath" />
          <classpath>
            <pathelement path="build/test-classes" />
          </classpath>
          <syspropertyset>
            <propertyref builtin="all" />
          </syspropertyset>
          <arg value="@{classname}" />
        </java>
      </sequential>
    </macrodef>

    <taskdef resource="scala/tools/ant/antlib.xml">
      <classpath>
        <pathelement location="${scala.home}/lib/scala-compiler.jar"   />
        <pathelement location="${scala-library.jar}"   />
      </classpath>
    </taskdef>

</project>
